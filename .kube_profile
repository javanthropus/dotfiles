# Prints the currently selected k8s user, cluster, and namespace as
# user@cluster:namespace.
function kube_info {
	JSONPATH="{range .contexts[?(@.name == '$(kubectl config current-context 2>/dev/null)')].context}{.user}@{.cluster}:{.namespace}{end}"
	kubectl config view -o jsonpath="$JSONPATH" |
		sed 's/^@/(none)@/; s/@:/@localhost:/; s/:$/:default/'
}

# Manages the KUBECONFIG environment variable by apending the given config file
# to the end of the list.  If no argument is given, the default KUBECONFIG
# setting is reinstated.
function kcnf {
	KUBECONFIG=$(printf '%s:%s:%s' "$SESSION_KUBECONFIG" "${ORIG_KUBECONFIG:-$HOME/.kube/config}" "${1:+$HOME/.kube/$1.yaml}" | sed 's/:::*/:/g; s/^://; s/:$//')
	export KUBECONFIG
}
function _kube_profile_configs {
	COMPREPLY=()
	[ $COMP_CWORD -gt 1 ] && return
	local word="${COMP_WORDS[COMP_CWORD]}"
	completions=$(cd $HOME/.kube && ls *.yaml | sed 's|\.yaml$||')
	COMPREPLY=( $(compgen -W "$completions" -- "$word") )
}
complete -F _kube_profile_configs kcnf

# Records the current setting of the KUBECONFIG environment variable.
function kcnf_save {
	ORIG_KUBECONFIG=$KUBECONFIG
	ORIG_KUBECONFIG_SET=1
}

# Reinstates the original setting of the KUBECONFIG environment variable.
function kcnf_restore {
	[ -z "$ORIG_KUBECONFIG_SET" ] || KUBECONFIG=$ORIG_KUBECONFIG
	unset ORIG_KUBECONFIG_SET ORIG_KUBECONFIG
}

# Sets the name of the current context to use.
function kco {
	if [ -z "$1" ]; then
		echo 'kco: context not provided' >&2
		return 1
	fi

	kubectl config use-context "$1"
}
function _kube_profile_contexts {
	COMPREPLY=()
	[ $COMP_CWORD -gt 1 ] && return
	local word="${COMP_WORDS[COMP_CWORD]}"
	completions=$(kubectl config get-contexts --no-headers -o name)
	COMPREPLY=( $(compgen -W "$completions" -- "$word") )
}
complete -F _kube_profile_contexts kco

# Sets the name of the cluster to use in the currently selected context.
function kcl {
	if [ -z "$1" ]; then
		echo 'kcl: cluster not provided' >&2
		return 1
	fi

	kubectl config set-context --current --cluster "$1"
}
function _kube_profile_clusters {
	COMPREPLY=()
	[ $COMP_CWORD -gt 1 ] && return
	local word="${COMP_WORDS[COMP_CWORD]}"
	completions=$(kubectl config get-clusters | tail -n +2)
	COMPREPLY=( $(compgen -W "$completions" -- "$word") )
}
complete -F _kube_profile_clusters kcl

# Sets the name of the namespace to use in the currently selected context.
function kns {
	if [ -z "$1" ]; then
		echo 'kns: namespace not provided' >&2
		return 1
	fi

	kubectl config set-context --current --namespace "$1"
}
function _kube_profile_namespaces {
	COMPREPLY=()
	[ $COMP_CWORD -gt 1 ] && return
	local word="${COMP_WORDS[COMP_CWORD]}"
	completions=$(kubectl get ns --no-headers -o custom-columns=NAME:.metadata.name)
	COMPREPLY=( $(compgen -W "$completions" -- "$word") )
}
complete -F _kube_profile_namespaces kns

# Sets the name of the user to use in the currently selected context.
function ku {
	if [ -z "$1" ]; then
		echo 'ku: user not provided' >&2
		return 1
	fi

	kubectl config set-context --current --user "$1"
}
function _kube_profile_users {
	COMPREPLY=()
	[ $COMP_CWORD -gt 1 ] && return
	local word="${COMP_WORDS[COMP_CWORD]}"
	completions=$(kubectl config get-users | tail -n +2)
	COMPREPLY=( $(compgen -W "$completions" -- "$word") )
}
complete -F _kube_profile_users ku

# Initializes a new kubeconfig session by creating a temporary file to hold
# session specific settings for context and prepending that file to the
# KUBECONFIG environnment variable value.
function init_kube_session {
	if [ -z "$SESSION_KUBECONFIG" ]; then
		trap '[ -z "$SESSION_KUBECONFIG" ] || rm -f "$SESSION_KUBECONFIG"' EXIT
		SESSION_KUBECONFIG=$(mktemp -t kube-session.XXXXXXXXXX)
	fi

	# Initialize the session config from its template file if available.
	[ -f ~/.kube/session_config ] &&
		cp ~/.kube/session_config "$SESSION_KUBECONFIG"

	# Initialize the KUBECONFIG environment variable to include the session
	# config file.
	kcnf_save
	kcnf

	if ! kubectl --kubeconfig "$SESSION_KUBECONFIG" config current-context >/dev/null 2>&1; then
		# Ensure that a context named "session" exists and use it.
		kubectl --kubeconfig "$SESSION_KUBECONFIG" config set-context session
		kubectl --kubeconfig "$SESSION_KUBECONFIG" config use-context session
	fi
}

function exit_kube_session {
	[ -z "$SESSION_KUBECONFIG" ] && return

	rm -f "$SESSION_KUBECONFIG"
	unset SESSION_KUBECONFIG
	kcnf_restore
}

# vim: set ft=sh:
